operations:

  - name: "change"
    format: 'key {change[@index1,index2,…]}: [{"operation": …, "value": …, "indices": …}, …]'
    description: Execute multiple operations for a given key.
    takes_indices: false
    takes_underscore_index: false
    requires_value: true
    value_type: "list[dict[str, Any]]"
    notes: >-
      In most cases, annotations in Cels, like 'key {operation@index}', carry out
      just a single action on a key. However, there might be situations where you'd
      like to make several changes to the same key. This is where the 'change'
      operation comes into play. It accepts a list of operations, along with their
      respective values and indices, and executes them in the order they're listed.
    examples:
      - title: "Rename key and append value to list"
        code: |
          # input
          foo: [1, 2, 3]

          # patch
          foo {change}:
            - operation: rename
              value: bar
            - operation: insert
              value: 100
              index: 0

          # output
          bar: [100, 1, 2, 3]

  - name: "delete"
    format: "key {delete[@index1,index2,…]}: value"
    description: Delete key.
    takes_indices: true
    takes_underscore_index: false
    requires_value: false
    value_type: "Any"
    notes: >-
      Removes the given key from the input dictionary. 'value' is ignored. You can use
      'null' for YAML and JSON and empty string ('""') for TOML.
    examples:
      - title: "Delete key/value pair"
        code: |
          # input
          foo: 1
          bar: 2

          # patch
          foo {delete}: null

          # output
          bar: 2
      - title: "Delete nested key/value pair"
        code: |
          # input
          foo:
            bar: 1
            baz: 2

          # patch
          foo {delete@baz}: null

          # output
          foo:
            bar: 1
      - title: "Delete nested list element"
        code: |
          # input
          foo:
            - bar
            - baz

          # patch
          foo {delete@1}: null

          # output
          foo:
            - bar

  - name: "extend"
    format: "key {extend[@index1,index2,…,_]}: value"
    description: Extend a list with the elements of the provided list.
    takes_indices: true
    takes_underscore_index: true
    requires_value: true
    value_type: "list"
    notes: >-
      'extend' operates similarly to 'insert'. However, instead of inserting a single
      element, it inserts all elements from 'value', which must be a list. Indices
      in 'extend' function in the same way as they do in 'insert'.
    examples:
      - title: "Extend at the end of a list"
        code: |
          # input
          foo: [1, 2, 3]

          # patch
          foo {extend}: [4, 5]

          # output
          foo: [1, 2, 3, 4, 5]
      - title: "Extend at an arbitrary position within a list"
        code: |
          # input
          foo: [1, 2, 3]

          # patch
          foo {extend@0}: [100, 200]

          # output
          foo: [100, 200, 1, 2, 3]
      - title: "'extend' operation is different than 'insert'"
        code: |
          # input
          foo: [1, 2, 3]
          bar: [1, 2, 3]

          # patch
          foo {insert}: [4, 5]
          bar {extend}: [4, 5]

          # output
          foo: [1, 2, 3, [4, 5]]
          bar: [1, 2, 3, 4, 5]


  - name: "insert"
    format: "key {insert[@index1,index2,…,_]}: value"
    description: Insert an element in a list.
    takes_indices: true
    takes_underscore_index: true
    requires_value: true
    value_type: "Any"
    notes: >-
      '{insert@index}' allows you to insert a 'value' at a specific 'index' position
      within the list pointed to by 'key'. 'index' can be either a positive or negative
      integer. If 'index' is '0', the element is inserted at the start of the
      list. Negative indices count from the end of the list, with '-1' representing
      the last element, '-2' the second to last, and so forth. 


      You can also use '_' as an index (i.e., '{insert@_}'), which appends the element
      to the end of the list. '{insert@_}' and '{insert}' are equivalent.


      To insert an element into a nested list, you can provide multiple indices
      separated by commas. The first index refers to the position of the nested list
      within the parent list. The second index indicates the position within the
      nested list where the 'value' should be inserted. This second index can also be
      '_', which will append the element to the end of the nested list. You can
      provide any number of indices to accommodate additional levels of nesting.
    examples:
      - title: "Append at the end of a list"
        code: |
          # input
          foo: [1, 2, 3, 4]

          # patch
          foo {insert}: 4

          # output
          foo: [1, 2, 3, 4]
      - title: "Insert at an arbitrary position within a list"
        code: |
          # input
          foo: [1, 2, 3]

          # patch
          foo {insert@0}: 100

          # output
          foo: [100, 1, 2, 3]
      - title: "'insert' operation is different than 'extend'"
        code: |
          # input
          foo: [1, 2, 3]
          bar: [1, 2, 3]

          # patch
          foo {insert}: [4, 5]
          bar {extend}: [4, 5]

          # output
          foo: [1, 2, 3, [4, 5]]
          bar: [1, 2, 3, 4, 5]

  - name: "keep"
    format: "key {keep[@index1,index2,…]}: value"
    description: Don't change the original value of the input file.
    takes_indices: true
    takes_underscore_index: false
    requires_value: false
    value_type: "Any"
    notes: >-
      This refers to the 'no-op' operation in Cels. While it's possible to use, it's
      typically unnecessary because any key from the input file that doesn't appear in
      the patch file will remain unaffected. However, it's worth noting that this
      operation is used internally within the tool and will be listed in the logs when
      they are activated.
    examples:
      - title: "Keep key"
        code: |
          # input
          foo: 3

          # patch
          foo {keep}: null

          # output
          foo: 3
      - title: "Keep list element"
        code: |
          # input
          foo: [1, 2, 3]

          # patch
          foo {keep@2}: null

          # output
          foo: [1, 2, 3]

  - name: "link"
    format: "key {link[@index1,index2,…]}: path"
    description: Attach part of the input document to a key.
    takes_indices: true
    takes_underscore_index: false
    requires_value: true
    value_type: "str"
    notes: >-
      'path' must correspond to a valid location within the input document (for
      instance, '.key1.key2[0].key3'). The value identified by this path is then
      utilized as the value for the 'key' in the modified document. This operation
      proves beneficial when there's a need to replicate a section of the input
      document in various locations within the output document. The 'path' should
      always represent a location in the input document, not the patch document. If
      you need to reuse a specific structure within the patch document, refer to the
      'var' and 'use' operations.
    examples:
      - title: "Link dictionary from a different part of the input document"
        code: |
          # input
          foo:
            bar:
              baz: 3

          # patch
          spam {link}: .foo.bar

          # output
          foo:
            bar:
              baz: 3
          spam:
            baz: 3
      - title: "Link to a value inside a list"
        code: |
          # input
          foo:
            - bar: 1
            - baz: 2

          # patch
          spam {link}: .foo[1]

          # output
          foo:
            - bar: 1
            - baz: 2
          spam:
            baz: 2
      - title: "Use index to set a value inside a nested structure"
        code: |
          # input
          foo:
            bar:
              baz: 3
          spam:
            this: 1
            that: 2

          # patch
          spam {link@that}: .foo.bar

          # output
          foo:
            bar:
              baz: 3
          spam:
            this: 1
            that:
              baz: 3

  - name: "patch"
    format: "key {patch[@index1,index2,…]}: value"
    description: Merge a patch dictionary with an input dictionary.
    takes_indices: true
    takes_underscore_index: false
    requires_value: true
    value_type: "dict"
    notes: >-
      The 'patch' operation is the default one for dictionaries in the patch
      file. If an operation isn't explicitly defined for a key that has a dictionary
      value, this dictionary will be merged with the corresponding one in the
      input document. So, most of the time, there's no need to specifically call out
      the 'patch' operation. However, there are certain situations where its use
      becomes necessary.
    examples:
      - title: "Patch dictionary"
        code: |
          # input
          foo:
            bar: 1
            baz: [1, 2, 3]

          # patch
          foo {patch}:
            bar: 2
            baz {insert}: 4

          # output
          foo:
            bar: 2
            baz: [1, 2, 3, 4]
      - title: "Patch is the default operation for dictionaries (no need to make it explicit)"
        code: |
          # input
          foo:
            bar: 1
            baz: 2

          # patch
          foo:
            bar: 100

          # output
          foo:
            bar: 100
            baz: 2
      - title: "An explicit patch is useful when used with an index"
        code: |
          # input
          foo:
            - bar: 1
            - this: 2
              that: 3

          # patch
          foo {patch@1}:
            that: 100

          # output
          foo:
            - bar: 1
            - this: 2
              that: 100

  - name: "rename"
    format: "'key {rename}: new-name'"
    description: Rename key.
    takes_indices: false
    takes_underscore_index: false
    requires_value: true
    value_type: "str | int | bool | None"
    notes: >-
      Rename 'key' to 'new-name'. The actual value of the key is not modified. 'rename'
      doesn't take indices.
    examples:
      - title: "Rename key"
        code: |
          # input
          foo: 1

          # patch
          foo {rename}: bar

          # output
          bar: 1
      - title: "Rename key in nested dictionary"
        code: |
          # input
          foo:
            bar: 1

          # patch
          foo {rename@bar}: baz

          # output
          foo:
            baz: 1

  - name: "render"
    format: "key {render[@index1,index2,…]}: template"
    description: Render a template string using variables defined with 'var'.
    takes_indices: true
    takes_underscore_index: false
    requires_value: true
    value_type: "str"
    notes: >-
      The 'render' operation functions in a manner akin to 'set'. However, instead of
      providing a value directly, this operation utilizes a
      Jinja template (https://jinja.palletsprojects.com/en/latest/templates/) string
      that can reference any variables defined via 'var'. For example, if a variable
      is defined as 'foo {var}: bar', a template string can incorporate it like so:
      '"This is the value of the variable: {{ foo }}"'. In scenarios where variables
      are lists or dictionaries, you can employ the '.' and '[]' notation to
      reference values within these structures. For instance, 'foo {var}: ["a", "b",
      "c"]' can be referred to as '"{{ foo[0] }}"'. The template string can make use
      of any of the Jinja features such as filters or control structures like
      conditionals or loops. Also, it can reference multiple variables in the
      template string provided that they are in scope (either defined in the same
      dictionary where 'render' is being invoked, or within one of its ancestor
      dictionaries.
    examples:
      - title: "Render string"
        code: |
          # input
          foo: "Hello"

          # patch
          name {var}: "Ada"
          foo {render}: "Hello {{ name }}!"

          # output
          foo: "Hello Ada!"
      - title: "Use Jinja syntax constructs"
        code: |
          # input
          foo: "Hello"

          # patch
          name {var}: "Ada"
          foo {render}: "Hello {{ name|upper }}!"

          # output
          foo: "Hello ADA!"
      - title: "Use nested data"
        code: |
          # input
          foo: "Hello"

          # patch
          data {var}:
            person:
              name: "Ada"
          foo {render}: "Hello {{ data.person.name }}!"

          # output
          foo: "Hello Ada!"

  - name: "set"
    format: "key {set[@index1,index2,…]}: value"
    description: Set the value of a key.
    takes_indices: true
    takes_underscore_index: false
    requires_value: true
    value_type: "Any"
    notes: >-
      The 'set' operation is the default one for all patch value data types,
      except for dictionaries. Typically, you don't have to explicitly use this
      operation unless you are replacing the element of a list, or 'value' is a
      dictionary that you want to set as-is without merging it with the
      contents of the input document.
    examples:
      - title: "Create new key"
        code: |
          # input
          foo: 1

          # patch
          bar {set}: 2

          # output
          foo: 1
          bar: 2
      - title: "If the value is an scalar or list, it is the default behavior"
        code: |
          # input
          foo: 1

          # patch
          bar: 2

          # output
          foo: 1
          bar: 2
      - title: "Use it explicitly when both the original and the new values are dictionaries"
        code: |
          # input
          foo1:
            bar: 1
            baz: 2
          foo2:
            bar: 1
            baz: 2

          # patch
          foo1 {set}:
            bar: 3
          foo2:
            bar: 3

          # output
          foo1:
            bar: 3
          foo2:
            bar: 3
            baz: 2

      - title: "Use 'set' with an index"
        code: |
          # input
          foo: [1, 2, 3]

          # patch
          foo {set@2}: 100

          # output
          foo: [1, 2, 100]

  - name: "use"
    format: "key {use[@index1,index2,…]}: variable-name"
    description: Set a key to the value of a variable.
    takes_indices: true
    takes_underscore_index: false
    requires_value: true
    value_type: "str"
    notes: >-
      The 'use' operation works similarly to 'set'. However, instead of directly
      supplying a value, this operation references a variable (identified by
      'variable-name') to source the value to use.

      Given that variables possess a scope, the 'use' operation can only reference
      those that are defined within the same dictionary where 'use' is being invoked,
      or within one of its ancestor dictionaries.
    examples:
      - title: "Use a variable"
        code: |
          # input
          foo: 1

          # patch
          bar {var}:
            baz: 3
          foo {use}: bar

          # output
          foo:
            baz: 3
      - title: "It can be used with an index"
        code: |
          # input
          foo: [1, 2, 3]

          # patch
          bar: 100
          foo {use@0}: bar

          # output
          foo: [100, 1, 2, 3]

  - name: "var"
    format: "key {var}: value"
    description: Define a variable inside the patch document.
    takes_indices: false
    takes_underscore_index: false
    requires_value: true
    value_type: "Any"
    notes: >-
      The 'var' operation establishes a variable in the form of 'key = value', which
      can subsequently be referenced by the 'use' and 'render' operations. The act of
      defining a variable does not alter the output document. Changes to the document
      only occur through the application of the 'use' and 'render' operations. The
      'var' operation doesn't take indices.

      Variables possess a defined scope and can only be referenced within the same
      dictionary where they were initially defined, or from any of its
      subsequent child dictionaries. Consequently, if your aim is to define a
      variable that can be accessed from any location within the patch file, it's
      best to define it within the root dictionary of the patch file.
    examples:
      - title: "Define and use a variable"
        code: |
          # input
          bar: 1

          # patch
          foo {var}: 100
          bar {use}: foo

          # output
          bar: 100

      - title: "Variable values can be arbitrarily complex"
        code: |
          # input
          bar: 1

          # patch
          foo {var}:
            this: [1, 2, 3]
            that:
              some_other_key: null
          bar {use}: foo

          # output
          bar:
            this: [1, 2, 3]
            that:
              some_other_key: null

      - title: "Variables have scopes"
        code: |
          # input
          foo:
            bar: 1
            baz: 2

          # patch
          this {var}: 100
          that {var}: 200
          foo:
             that {var}: 50
             bar: {use}: this
             baz: {use}: that

          # output
          foo:
            bar: 100
            baz: 50

