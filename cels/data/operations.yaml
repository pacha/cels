operations:

  - name: "change"
    description: Perform multiple operations on a single key.
    takes_indices: false
    takes_underscore_index: false
    requires_value: true
    value_type: "list[dict[str, Any]]"
    notes: >-
      For the 'change' operation, it is necessary to provide a list of
      dictionaries with the 'operation', 'value' and 'index' keys. 'value' and
      'index' can be ommitted depending on the selected operation. The
      operations are performed in the same order as they are listed. For
      example, if you delete a key and then try to rename it, it will result in
      an error. The 'change' operation doesn't take an index.
    examples:
      - title: "Rename key and append value to list"
        code: |
          # input
          foo: [1, 2, 3]

          # patch
          foo {change}:
            - operation: rename
              value: bar
            - operation: insert
              value: 100
              index: 0

          # output
          bar: [100, 1, 2, 3]

  - name: "delete"
    description: Delete an dictionary item or an element from a list.
    takes_indices: true
    takes_underscore_index: false
    requires_value: false
    value_type: "Any"
    notes: >-
      When no index is provided, the current key/value pair is deleted. If an
      index is provided, then the key/value pair or the list element pointed by
      the index is deleted. Trying to delete a non-existing key or element is
      allowed and results in a no-operation (the application will emit a warning, though).
      The value provided is ignored (it is advised to use 'null' for JSON and YAML, "" for
      TOML and None when directly using Python dictionaries).
    examples:
      - title: "Delete key/value pair"
        code: |
          # input
          foo: 1
          bar: 2

          # patch
          foo {delete}: null

          # output
          bar: 2
      - title: "Delete nested key/value pair"
        code: |
          # input
          foo:
            bar: 1
            baz: 2

          # patch
          foo {delete@baz}: null

          # output
          foo:
            bar: 1
      - title: "Delete nested list element"
        code: |
          # input
          foo:
            - bar
            - baz

          # patch
          foo {delete@1}: null

          # output
          foo:
            - bar

  - name: "extend"
    description: Concatenate a list to a existing one.
    takes_indices: true
    takes_underscore_index: true
    requires_value: true
    value_type: "list"
    notes: >-
      The 'extend' operation always takes a list as parameter. If no index is
      provided, the passed list is concatenated at the end of the original
      list. If a numerical index is provided, the elements of the passed list
      are inserted at that position. (First position starting at 0).
    examples:
      - title: "Extend at the end of a list"
        code: |
          # input
          foo: [1, 2, 3]

          # patch
          foo {extend}: [4, 5]

          # output
          foo: [1, 2, 3, 4, 5]
      - title: "Extend at an arbitrary position within a list"
        code: |
          # input
          foo: [1, 2, 3]

          # patch
          foo {extend@0}: [100, 200]

          # output
          foo: [100, 200, 1, 2, 3]
      - title: "'extend' operation is different than 'insert'"
        code: |
          # input
          foo: [1, 2, 3]
          bar: [1, 2, 3]

          # patch
          foo {insert}: [4, 5]
          bar {extend}: [4, 5]

          # output
          foo: [1, 2, 3, [4, 5]]
          bar: [1, 2, 3, 4, 5]


  - name: "insert"
    description: Add an element to a list.
    takes_indices: true
    takes_underscore_index: true
    requires_value: true
    value_type: "Any"
    notes: >-
      If no index is provided, the passed value is appended at the end of the
      original list. If a numerical index is provided, the value is inserted at
      that position. (First position starting at 0).
    examples:
      - title: "Append at the end of a list"
        code: |
          # input
          foo: [1, 2, 3, 4]

          # patch
          foo {insert}: 4

          # output
          foo: [1, 2, 3, 4]
      - title: "Insert at an arbitrary position within a list"
        code: |
          # input
          foo: [1, 2, 3]

          # patch
          foo {insert@0}: 100

          # output
          foo: [100, 1, 2, 3]
      - title: "'insert' operation is different than 'extend'"
        code: |
          # input
          foo: [1, 2, 3]
          bar: [1, 2, 3]

          # patch
          foo {insert}: [4, 5]
          bar {extend}: [4, 5]

          # output
          foo: [1, 2, 3, [4, 5]]
          bar: [1, 2, 3, 4, 5]

  - name: "keep"
    description: Don't perform any action on the item. 
    takes_indices: true
    takes_underscore_index: false
    requires_value: false
    value_type: "Any"
    notes: >-
      Keys in input data that are not specified in patch data are kept by
      default. Therefore, manually setting this operation manually is usually
      not required. For this operation, the provided value is ignored.
    examples:
      - title: "Keep key"
        code: |
          # input
          foo: 3

          # patch
          foo {keep}: null

          # output
          foo: 3
      - title: "Keep list element"
        code: |
          # input
          foo: [1, 2, 3]

          # patch
          foo {keep@2}: null

          # output
          foo: [1, 2, 3]

  - name: "link"
    description: Create or replace an item with the value obtained from copying a branch of the input document.
    takes_indices: true
    takes_underscore_index: false
    requires_value: true
    value_type: "str"
    notes: >-
      The 'link' operation takes a path -using dot notation (eg. .key1.key2.element[3])-
      that points to a part of the input document. The pointed value is then used as the
      value of the current key if no index is provided or at the position indicated by
      the index inside the nested dictionary/list otherwise.
    examples:
      - title: "Link dictionary from a different part of the input document"
        code: |
          # input
          foo:
            bar:
              baz: 3

          # patch
          spam {link}: .foo.bar

          # output
          foo:
            bar:
              baz: 3
          spam:
            baz: 3
      - title: "Link to a value inside a list"
        code: |
          # input
          foo:
            - bar: 1
            - baz: 2

          # patch
          spam {link}: .foo[1]

          # output
          foo:
            - bar: 1
            - baz: 2
          spam:
            baz: 2
      - title: "Use index to set a value inside a nested structure"
        code: |
          # input
          foo:
            bar:
              baz: 3
          spam:
            this: 1
            that: 2

          # patch
          spam {link@that}: .foo.bar

          # output
          foo:
            bar:
              baz: 3
          spam:
            this: 1
            that:
              baz: 3

  - name: "patch"
    description: Apply a patch dictionary.
    takes_indices: true
    takes_underscore_index: false
    requires_value: true
    value_type: "dict"
    notes: >-
      The 'patch' operation is the base of Cels. Most of the time it doesn't have
      to be explicitly specified since that's the default behavior for dictionary keys
      that match in the input document and the patch one. That is, in the patch document
      you can mirror the structure of a dictionary from the input document and provide
      annotations in the keys to specify operations. The process of matching each key of
      both dictionaries and executing the changes is the 'patch' operation. There's only
      one case in which it is necessary to call the 'patch' operation explicitly, and that's
      when one needs to patch a dictionary inside a list. See the examples below for more
      information.
    examples:
      - title: "Patch dictionary"
        code: |
          # input
          foo:
            bar: 1
            baz: [1, 2, 3]

          # patch
          foo {patch}:
            bar: 2
            baz {insert}: 4

          # output
          foo:
            bar: 2
            baz: [1, 2, 3, 4]
      - title: "Patch is the default operation for dictionaries (no need to make it explicit)"
        code: |
          # input
          foo:
            bar: 1
            baz: [1, 2, 3]

          # patch
          foo:
            bar: 2
            baz {insert}: 4

          # output
          foo:
            bar: 2
            baz: [1, 2, 3, 4]
      - title: "An explicit patch is useful when used with an index"
        code: |
          # input
          foo:
            - bar: 1
            - this: 2
              that: 3

          # patch
          foo {patch@1}:
            that: 100

          # output
          foo:
            - bar: 1
            - this: 2
              that: 100

  - name: "rename"
    description: Rename a dictionary key.
    takes_indices: false
    takes_underscore_index: false
    requires_value: true
    value_type: "str | int | bool | None"
    notes: >-
      The 'rename' operation takes the new name of the key as parameter. If no
      index is provided, the annotated key is renamed. It is also possible to
      pass an index pointing to the key of a nested dictionary, but the
      operation raises an error if used with a nested list.
    examples:
      - title: "Rename key"
        code: |
          # input
          foo: 1

          # patch
          foo {rename}: bar

          # output
          bar: 1
      - title: "Rename key in nested dictionary"
        code: |
          # input
          foo:
            bar: 1

          # patch
          foo {rename@bar}: baz

          # output
          foo:
            baz: 1

  - name: "render"
    description: Create a new item with a string rendered using variables defined with 'var'.
    takes_indices: true
    takes_underscore_index: false
    requires_value: true
    value_type: "str"
    notes: >-
      The 'render' operation takes a template string as a parameter, then the
      final value is generated by rendering the template using the variables
      defined with the 'var' operation. The template must be defined using the
      Jinja template syntax (https://jinja.palletsprojects.com/en/latest/templates/).
    examples:
      - title: "Render string"
        code: |
          # input
          foo: "Hello"

          # patch
          name {var}: "Ada"
          foo {render}: "Hello {{ name }}!"

          # output
          foo: "Hello Ada!"
      - title: "Use Jinja syntax constructs"
        code: |
          # input
          foo: "Hello"

          # patch
          name {var}: "Ada"
          foo {render}: "Hello {{ name|upper }}!"

          # output
          foo: "Hello ADA!"
      - title: "Use nested data"
        code: |
          # input
          foo: "Hello"

          # patch
          data {var}:
            person:
              name: "Ada"
          foo {render}: "Hello {{ data.person.name }}!"

          # output
          foo: "Hello Ada!"

  - name: "set"
    description: Create or replace an item.
    takes_indices: true
    takes_underscore_index: false
    requires_value: true
    value_type: "Any"
    notes: >-
      The 'set' operation is the default one for scalar and list values. That
      means that most of the time you don't have to explicitly specify it. The
      only case in which it is necessary is when both the original and new
      values are dictionaries. If you don't explicitly define 'set' as the
      operation to use, the default behavior in that case is 'patch' (see
      examples below for more information). It is possible to pass an index to
      modify a nested dictionary or list.
    examples:
      - title: "Create new key"
        code: |
          # input
          foo: 1

          # patch
          bar {set}: 2

          # output
          foo: 1
          bar: 2
      - title: "If the value is an scalar or list, it is the default behavior"
        code: |
          # input
          foo: 1

          # patch
          bar: 2

          # output
          foo: 1
          bar: 2
      - title: "Use it explicitly when both the original and the new values are dictionaries"
        code: |
          # input
          foo1:
            bar: 1
            baz: 2
          foo2:
            bar: 1
            baz: 2

          # patch
          foo1 {set}:
            bar: 3
          foo2:
            bar: 3

          # output
          foo1:
            bar: 3
          foo2:
            bar: 3
            baz: 2

      - title: "Use 'set' with an index"
        code: |
          # input
          foo: [1, 2, 3]

          # patch
          foo {set@2}: 100

          # output
          foo: [1, 2, 100]

  - name: "use"
    description: Create or replace an item using the value of a variable defined with 'var'.
    takes_indices: true
    takes_underscore_index: false
    requires_value: true
    value_type: "str"
    notes: >-
      The 'use' operation works like the 'set' operation but takes the name of
      a variable defined with 'var' as parameter. The value pointed to by 'var'
      is used then to set the key/element. It is possible to pass an index to
      modify a nested dictionary or list.
    examples:
      - title: "Use a variable"
        code: |
          # input
          foo: 1

          # patch
          bar {var}:
            baz: 3
          foo {use}: bar

          # output
          foo:
            baz: 3
      - title: "It can be used with an index"
        code: |
          # input
          foo: [1, 2, 3]

          # patch
          bar: 100
          foo {use@0}: bar

          # output
          foo: [100, 1, 2, 3]

  - name: "var"
    description: Define a variable.
    takes_indices: false
    takes_underscore_index: false
    requires_value: true
    value_type: "Any"
    notes: >-
      The 'var' operation doesn't have a direct effect in the output document,
      but it can be used to define variables that are later referenced by the
      'use' and 'render' operations. The key and value provided are, respectively,
      the name of the variable and its value. The name of the variable needs to
      be a valid identified only constructed with alphanumerical characters and
      underscore. A variable can be referenced by all the operations within
      the same dictionary where it is defined and (recursively) by any nested
      dictionary or list. However, a parent dictionary can't reference variables
      defined in a child dictionary.
    examples:
      - title: "Define and use a variable"
        code: |
          # input
          bar: 1

          # patch
          foo {var}: 100
          bar {use}: foo

          # output
          bar: 100

      - title: "Variable values can be arbitrarily complex"
        code: |
          # input
          bar: 1

          # patch
          foo {var}:
            this: [1, 2, 3]
            that:
              some_other_key: null
          bar {use}: foo

          # output
          bar:
            this: [1, 2, 3]
            that:
              some_other_key: null

      - title: "Variables have scopes"
        code: |
          # input
          foo:
            bar: 1
            baz: 2

          # patch
          this {var}: 100
          that {var}: 200
          foo:
             that {var}: 50
             bar: {use}: this
             baz: {use}: that

          # output
          foo:
            bar: 100
            baz: 50

