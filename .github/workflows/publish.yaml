name: Publish Python distribution

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build distribution
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.check-version.outputs.version }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.x"

    - name: Check if version was bumped
      id: check-version
      run: |
        git fetch --prune --unshallow
        VERSION=$(grep "^version" pyproject.toml | head -1 | awk '{print $3}' | sed 's/"//g')
        TAG=$(git tag --sort=-v:refname | head -1)
        if [ "$VERSION" == "$TAG" ]; then
          echo "Version was not bumped in pyproject.toml"
          echo "::set-output name=version::"
        else
          echo "::set-output name=version::$VERSION"
        fi

    - name: Install pypa/build
      if: steps.check-version.outputs.version != ''
      run: >-
        python3 -m pip install build --user

    - name: Build a binary wheel and a source tarball
      if: steps.check-version.outputs.version != ''
      run: python3 -m build

    - name: Store the distribution packages
      if: steps.check-version.outputs.version != ''
      uses: actions/upload-artifact@v3
      with:
        name: python-package-distributions
        path: dist/

  publish-to-testpypi:
    name: Publish Python distribution to TestPyPI
    needs:
    - build
    if: needs.build.outputs.version != ''
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/cels
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/

    - name: Publish distribution to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/

  publish-to-pypi:
    name: Publish Python distribution to PyPI
    needs:
    - build
    if: needs.build.outputs.version != ''
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/cels
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/

    - name: Publish distribution to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  github-release:
    name: >-
      Sign the Python distribution with Sigstore
      and create GitHub Release
    needs:
    - build
    - publish-to-pypi
    runs-on: ubuntu-latest
    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/

    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v1.2.3
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl

    - name: Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      # Upload to GitHub Release using the `gh` CLI.
      # `dist/` contains the built packages, and the
      # sigstore-produced signatures and certificates.
      run: |
        gh release create '${{ needs.build.outputs.version }}' --repo '${{ github.repository }}'
        gh release upload '${{ needs.build.outputs.version }}' dist/** --repo '${{ github.repository }}'

